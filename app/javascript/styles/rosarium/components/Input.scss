@use "../measures.scss";
@use "../colors.scss";
@use "../utilities.scss";
@use "sass:map";

// BASE STYLES

.rosarium-input-wrapper {
  @include utilities.flex-row;
  align-items: center;
  position: relative;

  border-style: solid;
  border-width: measures.$border-width-s;

  // TODO: move to variants and change for locked
  cursor: text;

  input {
    flex-grow: 1;
    background-color: transparent;

    &:focus {
      outline: none;
    }

    &::placeholder {
      color: var(--tinctus-gray-400);
    }
  }

  // TODO: refactor when adding clear button
  .rosarium-icon--eye-hide,
  .rosarium-icon--eye-show {
    cursor: pointer;
  }
}


// SIZES

$sizes: (
  "small": (
    "input-font-size": measures.$font-size-s,
    "label-font-size": measures.$font-size-s,
    "gap": measures.$distance-xs,
    "height": measures.$font-size-s,
    "h-padding": measures.$distance-s,
    "v-padding": measures.$distance-xs,
    "inner-gap": measures.$distance-xs,
    "border-radius": measures.$radius-s,
    "icon-size": measures.$distance-m,
  ),

  "medium": (
    "input-font-size": measures.$font-size-l,
    "label-font-size": measures.$font-size-m,
    "gap": measures.$distance-s,
    "height": measures.$font-size-l,
    "h-padding": measures.$distance-m,
    "v-padding": measures.$distance-s,
    "inner-gap": measures.$distance-s,
    "border-radius": measures.$radius-m,
    "icon-size": measures.$distance-l,
  ),
  "large": (
    "input-font-size": measures.$font-size-xl,
    "label-font-size": measures.$font-size-l,
    "gap": measures.$distance-s,
    "height": measures.$font-size-xl,
    "h-padding": measures.$distance-m,
    "v-padding": measures.$distance-m,
    "inner-gap": measures.$distance-m,
    "border-radius": measures.$radius-l,
    "icon-size": measures.$distance-xl,
  ),
);


@each $size, $values in $sizes {
  .rosarium-input--#{$size} {
    @include utilities.flex-col;

    // TODO: label on the side?
    .rosarium-input--outer-label {
      color: var(--tinctus-gray-700);
      font-size: map.get($values, "label-font-size");
      margin-bottom: map.get($values, "gap");
    }

    .rosarium-input-wrapper {
      padding: map.get($values, "v-padding") map.get($values, "h-padding");
      gap: map.get($values, "h-padding");
      border-radius: map.get($values, "border-radius");

      input {
        font-size: map.get($values, "input-font-size");
      }

      .rosarium-icon--error {
        position: absolute;
        left: -30px; // TODO: use correct distance according to size
      }

      &:focus-within {
        border-color: var(--tinctus-primary-300);
        outline-width: measures.$border-width-s;
        outline-style: solid;
      }
    }

    span[class^="rosarium-icon"] {
      width: map.get($values, "icon-size");
      height: map.get($values, "icon-size");
    }
  }
}

// VARIANTS

$variants: (
  "active": (
    "border": var(--tinctus-gray-200),
    "border-focus": var(--tinctus-primary-300),
    "icon": var(--tinctus-primary-600),
    "icon-hover": var(--tinctus-primary-400),
  ),
  "error": (
    "border": var(--tinctus-error-400),
    "border-focus": var(--tinctus-error-500),
    "icon": var(--tinctus-error-400),
    "icon-hover": var(--tinctus-error-500),
  )
);

@each $variant, $values in $variants {
  .rosarium-input--#{$variant} {
    span[class^="rosarium-icon"] {
      background-color: map.get($values, "icon");
    }

    .rosarium-input-wrapper {
      border-color: map.get($values, "border");

      &:focus-within {
        border-color: map.get($values, "border-focus");
        outline-color: map.get($values, "border-focus");
      }

      .rosarium-icon--eye-hide:hover,
      .rosarium-icon--eye-show:hover {
        background-color: map.get($values, "icon-hover");
      }
    }
  }
}


// Input Groups
// TODO: sizes
.rosarium-input-group {
  display: flex;
  flex-direction: column;
  gap: measures.$distance-m;
  padding: measures.$distance-m 0;
}

// Inner label shenanigans

.rosarium-input--large {
  .rosarium-input-wrapper {
    .rosarium-input--inner-label {
      position: absolute;
      top: 0;
      left: 0;
      height: measures.$font-size-xl;
      margin: measures.$distance-m;
      border-radius: measures.$radius-s;
      font-size: measures.$font-size-xl;
      /* TODO: this is a good candidate for a next level variable (color-input-placeholder)*/
      color: var(--tinctus-gray-400);
      transition: all 0.3s ease;
      cursor: text;

      &:has(+ input:not(:placeholder-shown)),
      &:has(+ input:focus) {
        top: -18px;
        left: 8px;
        margin: 0;
        padding: measures.$distance-xxs measures.$distance-s;
        font-size: measures.$font-size-m;
        height: measures.$distance-xl;
        /* TODO: also good variable candidate or even mixin */
        color: var(--tinctus-gray-700);
        background-color: var(--tinctus-white);
        cursor: default;
        /* TODO: this is so ugly I won't even fix it right now */
        border: 1px solid var(--tinctus-primary-300);
      }
    }
  }
}